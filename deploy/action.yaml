name: "Deploy Alembic Migrations"
description: "Safely applies Alembic migrations to a database"

inputs:
  dialect:
    description: "SQL dialect to use for Alembic (postgresql, mysql, etc.)"
    required: true
    default: "postgresql"
  alembic_ini:
    description: "Path to alembic.ini file"
    required: true
    default: "alembic.ini"
  migration_path:
    description: "Path to Alembic migrations directory"
    required: true
    default: "migrations"
  database:
    description: "Database name for multi-database setup (optional)"
    required: false
  database_url:
    description: "Database URL to apply migrations to (will override alembic.ini)"
    required: true
  backup:
    description: "Whether to create a database backup before applying migrations"
    required: false
    default: "true"
  target_revision:
    description: "Target revision to migrate to (default: head)"
    required: false
    default: "head"

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Install uv
      shell: bash
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Create virtual environment and install dependencies
      shell: bash
      run: |
        uv venv
        uv pip install alembic sqlalchemy psycopg2-binary pymysql

    - name: Create database backup
      if: ${{ inputs.backup == 'true' }}
      shell: bash
      run: |
        echo "Creating database backup before applying migrations"
        # This would contain specific logic for backing up the database
        # depending on database type (PostgreSQL, MySQL, etc.)
        
        # Example for PostgreSQL
        if [[ "${{ inputs.dialect }}" == "postgresql" ]]; then
          echo "Backing up PostgreSQL database"
          # pg_dump logic would go here
        fi
        
        # Example for MySQL
        if [[ "${{ inputs.dialect }}" == "mysql" ]]; then
          echo "Backing up MySQL database"
          # mysqldump logic would go here
        fi

    - name: Generate SQL script
      id: generate_sql
      shell: bash
      run: |
        DATABASE_ARG=""
        if [ -n "${{ inputs.database }}" ]; then
          DATABASE_ARG="--database ${{ inputs.database }}"
        fi

        uv run python ${{ github.action_path }}/../shared/scripts/generate_sql.py \
          --generate-sql \
          --dialect ${{ inputs.dialect }} \
          --alembic-ini ${{ inputs.alembic_ini }} \
          --migration-path ${{ inputs.migration_path }} \
          --revision-range ${{ inputs.target_revision }} \
          $DATABASE_ARG \
          --verbose

    - name: Apply migrations
      shell: bash
      run: |
        # Import utility functions to determine databases
        DATABASES_TO_DEPLOY=$(uv run python -c "
        import sys
        sys.path.append('${{ github.action_path }}/../shared/scripts')
        from alembic_utils import get_databases_for_deploy
        databases = get_databases_for_deploy('${{ inputs.alembic_ini }}', '${{ inputs.database }}' if '${{ inputs.database }}' else None)
        print(' '.join(databases) if databases else '')
        ")

        if [ -z "$DATABASES_TO_DEPLOY" ]; then
          # Single database deployment
          echo "Applying Alembic migrations to single database, target: ${{ inputs.target_revision }}"

          # Override the database URL in alembic.ini
          sed -i "s|sqlalchemy.url = .*|sqlalchemy.url = ${{ inputs.database_url }}|g" ${{ inputs.alembic_ini }}

          uv run alembic -c ${{ inputs.alembic_ini }} upgrade ${{ inputs.target_revision }}

          # Get current revision after migration
          CURRENT_REVISION=$(uv run alembic -c ${{ inputs.alembic_ini }} current)
          echo "Current database revision: $CURRENT_REVISION"
          echo "current_revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
        else
          # Multi-database deployment
          echo "Applying Alembic migrations to databases: $DATABASES_TO_DEPLOY"
          echo "Target revision: ${{ inputs.target_revision }}"

          ALL_REVISIONS=""

          for DB in $DATABASES_TO_DEPLOY; do
            echo "=== Deploying to database: $DB ==="

            # For multi-DB, we assume the URL is configured in alembic.ini sections
            # Override only if a single database_url is provided for all
            if [ -n "${{ inputs.database_url }}" ]; then
              echo "Warning: Single database_url provided for multi-database setup"
              echo "Consider using section-specific URLs in alembic.ini"
            fi

            uv run alembic -c ${{ inputs.alembic_ini }} --name $DB upgrade ${{ inputs.target_revision }}

            # Get current revision after migration
            CURRENT_REVISION=$(uv run alembic -c ${{ inputs.alembic_ini }} --name $DB current)
            echo "Database $DB current revision: $CURRENT_REVISION"
            ALL_REVISIONS="$ALL_REVISIONS$DB:$CURRENT_REVISION "
          done

          echo "current_revision=$ALL_REVISIONS" >> $GITHUB_OUTPUT
        fi